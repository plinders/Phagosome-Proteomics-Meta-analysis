gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
#Read source data
meta <- read.csv("Documents/edX_R/meta.csv")
#import libraries
library("ggplot2")
library("plyr")
library("reshape2")
library("scales")
library("grid")
#transform and rescale data in prep for later steps
meta.m <- melt(meta)
meta.s <- ddply(meta.m, .(variable), transform,
rescale = scale(value))
#generate categories to sort conditions by colour
meta.s$Category <- meta.s$variable
levels(meta.s$Category) <-
list("IgG_early" = c("X1", "X2"),
"Latex_early" = c("X3", "X4", "X5", "X6", "X7"),
"BCG_late" = c("X13"),
"IgG_late" = c("X10", "X17"),
"Latex_late" = c("X8", "X9", "X11", "X12", "X14", "X15", "X16"),
"LPS_late" = c("X18", "X19"))
#define colours per category
meta.s$rescaleoffset <- meta.s$rescale + 100*(as.numeric(meta.s$Category)-1)
scalerange <- range(meta.s$rescale)
gradientends <- scalerange + rep(c(0,100,200,300,400,500), each = 2)
colorends <- c("white", "green", "white", "orange", "white", "red", "white", "green", "white", "orange", "white", "purple")
#reorder by category
meta.s$variable2 <- reorder(meta.s$variable, as.character(meta.s$Category))
#reverse y axis labels (were z-a, now a-z)
flevels <- levels(meta.s$Protein)
flevels <- rev(flevels)
#x axis annotation variables
text_early <- textGrob("Early", gp=gpar(fontsize = 5, fontface = "bold", col = "red"))
text_late <- textGrob("Late", gp=gpar(fontsize = 5, fontface = "bold", col = "red"))
#plot heatmap
p <- ggplot(meta.s, aes(variable2, Protein)) +
geom_tile(aes(fill = rescaleoffset, shape = substr(Category, 1, 3)), colour = "lightgrey", show.legend = TRUE) +
#add line to seperate early from late
geom_vline(xintercept = 7.5) +
scale_fill_gradientn(colours = colorends, values = rescale(gradientends), guide = FALSE) +
scale_x_discrete("", expand = c(0, 0)) +
scale_y_discrete("", limits = flevels, expand = c(0, 0)) +
theme_grey(base_size = 5) +
theme(legend.position = "right",
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 270, hjust = 0, size = 5, vjust = 0, face = "bold"),
plot.margin = unit(c(1,1,2,1), "lines")) +
annotation_custom(text_early, xmin = 0, xmax = 8, ymin=168.5, ymax = 168.5) +
annotation_custom(text_late, xmin = 8, xmax = 19, ymin=168.5, ymax = 168.5) +
guides(shape = guide_legend("Category", override.aes = list(fill = c("red", "green", "orange", "purple"))))
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
#Read source data
meta <- read.csv("Documents/edX_R/meta.csv")
#import libraries
library("ggplot2")
library("plyr")
library("reshape2")
library("scales")
library("grid")
#transform and rescale data in prep for later steps
meta.m <- melt(meta)
meta.s <- ddply(meta.m, .(variable), transform,
rescale = scale(value))
#generate categories to sort conditions by colour
meta.s$Category <- meta.s$variable
levels(meta.s$Category) <-
list("IgG_early" = c("X1", "X2"),
"Latex_early" = c("X3", "X4", "X5", "X6", "X7"),
"BCG_late" = c("X13"),
"IgG_late" = c("X10", "X17"),
"Latex_late" = c("X8", "X9", "X11", "X12", "X14", "X15", "X16"),
"LPS_late" = c("X18", "X19"))
#define colours per category
meta.s$rescaleoffset <- meta.s$rescale + 100*(as.numeric(meta.s$Category)-1)
scalerange <- range(meta.s$rescale)
gradientends <- scalerange + rep(c(0,100,200,300,400,500), each = 2)
colorends <- c("white", "green", "white", "orange", "white", "red", "white", "green", "white", "orange", "white", "purple")
#reorder by category
meta.s$variable2 <- reorder(meta.s$variable, as.double(meta.s$Category))
#reverse y axis labels (were z-a, now a-z)
flevels <- levels(meta.s$Protein)
flevels <- rev(flevels)
#x axis annotation variables
text_early <- textGrob("Early", gp=gpar(fontsize = 5, fontface = "bold", col = "red"))
text_late <- textGrob("Late", gp=gpar(fontsize = 5, fontface = "bold", col = "red"))
#plot heatmap
p <- ggplot(meta.s, aes(variable2, Protein)) +
geom_tile(aes(fill = rescaleoffset, shape = substr(Category, 1, 3)), colour = "lightgrey", show.legend = TRUE) +
#add line to seperate early from late
geom_vline(xintercept = 7.5) +
scale_fill_gradientn(colours = colorends, values = rescale(gradientends), guide = FALSE) +
scale_x_discrete("", expand = c(0, 0)) +
scale_y_discrete("", limits = flevels, expand = c(0, 0)) +
theme_grey(base_size = 5) +
theme(legend.position = "right",
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 270, hjust = 0, size = 5, vjust = 0, face = "bold"),
plot.margin = unit(c(1,1,2,1), "lines")) +
annotation_custom(text_early, xmin = 0, xmax = 8, ymin=168.5, ymax = 168.5) +
annotation_custom(text_late, xmin = 8, xmax = 19, ymin=168.5, ymax = 168.5) +
guides(shape = guide_legend("Category", override.aes = list(fill = c("red", "green", "orange", "purple"))))
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
#Read source data
meta <- read.csv("Documents/edX_R/meta.csv")
#import libraries
library("ggplot2")
library("plyr")
library("reshape2")
library("scales")
library("grid")
#transform and rescale data in prep for later steps
meta.m <- melt(meta)
meta.s <- ddply(meta.m, .(variable), transform,
rescale = scale(value))
#generate categories to sort conditions by colour
meta.s$Category <- meta.s$variable
levels(meta.s$Category) <-
list("IgG_early" = c("X1", "X2"),
"Latex_early" = c("X3", "X4", "X5", "X6", "X7"),
"BCG_late" = c("X13"),
"IgG_late" = c("X10", "X17"),
"Latex_late" = c("X8", "X9", "X11", "X12", "X14", "X15", "X16"),
"LPS_late" = c("X18", "X19"))
#define colours per category
meta.s$rescaleoffset <- meta.s$rescale + 100*(as.numeric(meta.s$Category)-1)
scalerange <- range(meta.s$rescale)
gradientends <- scalerange + rep(c(0,100,200,300,400,500), each = 2)
colorends <- c("white", "green", "white", "orange", "white", "red", "white", "green", "white", "orange", "white", "purple")
#reorder by category
meta.s$variable2 <- reorder(meta.s$variable, as.double(meta.s$Category))
#reverse y axis labels (were z-a, now a-z)
flevels <- levels(meta.s$Protein)
flevels <- rev(flevels)
#x axis annotation variables
text_early <- textGrob("Early", gp=gpar(fontsize = 5, fontface = "bold", col = "red"))
text_late <- textGrob("Late", gp=gpar(fontsize = 5, fontface = "bold", col = "red"))
#plot heatmap
p <- ggplot(meta.s, aes(variable2, Protein)) +
geom_tile(aes(fill = rescaleoffset, shape = substr(Category, 1, 3)), colour = "lightgrey", show.legend = TRUE) +
#add line to seperate early from late
geom_vline(xintercept = 7.5) +
scale_fill_gradientn(colours = colorends, values = rescale(gradientends), guide = FALSE) +
scale_x_discrete("", expand = c(0, 0)) +
scale_y_discrete("", limits = flevels, expand = c(0, 0)) +
theme_grey(base_size = 5) +
theme(legend.position = "right",
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 270, hjust = 0, size = 5, vjust = 0, face = "bold"),
plot.margin = unit(c(1,1,2,1), "lines")) +
annotation_custom(text_early, xmin = 0, xmax = 8, ymin=168.5, ymax = 168.5) +
annotation_custom(text_late, xmin = 8, xmax = 19, ymin=168.5, ymax = 168.5) +
guides(shape = guide_legend("Category", override.aes = list(fill = c("red", "green", "orange", "purple"))))
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
#Read source data
meta <- read.csv("Documents/edX_R/meta.csv")
#import libraries
library("ggplot2")
library("plyr")
library("reshape2")
library("scales")
library("grid")
#transform and rescale data in prep for later steps
meta.m <- melt(meta)
meta.s <- ddply(meta.m, .(variable), transform,
rescale = scale(value))
#generate categories to sort conditions by colour
meta.s$Category <- meta.s$variable
levels(meta.s$Category) <-
list("IgG_early" = c("X1", "X2"),
"Latex_early" = c("X3", "X4", "X5", "X6", "X7"),
"BCG_late" = c("X13"),
"IgG_late" = c("X10", "X17"),
"Latex_late" = c("X8", "X9", "X11", "X12", "X14", "X15", "X16"),
"LPS_late" = c("X18", "X19"))
#define colours per category
meta.s$rescaleoffset <- meta.s$rescale + 100*(as.numeric(meta.s$Category)-1)
scalerange <- range(meta.s$rescale)
gradientends <- scalerange + rep(c(0,100,200,300,400,500), each = 2)
colorends <- c("white", "green", "white", "orange", "white", "red", "white", "green", "white", "orange", "white", "purple")
#reorder by category
meta.s$variable2 <- reorder(meta.s$variable, as.double(meta.s$Category))
#reverse y axis labels (were z-a, now a-z)
flevels <- levels(meta.s$Protein)
flevels <- rev(flevels)
#x axis annotation variables
text_early <- textGrob("Early", gp=gpar(fontsize = 5, fontface = "bold", col = "red"))
text_late <- textGrob("Late", gp=gpar(fontsize = 5, fontface = "bold", col = "red"))
#plot heatmap
p <- ggplot(meta.s, aes(variable2, Protein)) +
geom_tile(aes(fill = rescaleoffset, shape = substr(Category, 1, 3)), colour = "lightgrey", show.legend = TRUE) +
#add line to seperate early from late
geom_vline(xintercept = 7.5) +
scale_fill_gradientn(colours = colorends, values = rescale(gradientends), guide = FALSE) +
scale_x_discrete("", expand = c(0, 0)) +
scale_y_discrete("", limits = flevels, expand = c(0, 0)) +
theme_grey(base_size = 5) +
theme(legend.position = "right",
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 270, hjust = 0, size = 5, vjust = 0, face = "bold"),
plot.margin = unit(c(1,1,2,1), "lines")) +
annotation_custom(text_early, xmin = 0, xmax = 8, ymin=168.5, ymax = 168.5) +
annotation_custom(text_late, xmin = 8, xmax = 19, ymin=168.5, ymax = 168.5) +
guides(shape = guide_legend("Category", override.aes = list(fill = c("red", "green", "orange", "purple"))))
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
#Read source data
meta <- read.csv("Documents/edX_R/meta.csv")
#import libraries
library("ggplot2")
library("plyr")
library("reshape2")
library("scales")
library("grid")
#transform and rescale data in prep for later steps
meta.m <- melt(meta)
meta.s <- ddply(meta.m, .(variable), transform,
rescale = scale(value))
#generate categories to sort conditions by colour
meta.s$Category <- meta.s$variable
levels(meta.s$Category) <-
list("IgG_early" = c("X1", "X2"),
"Latex_early" = c("X3", "X4", "X5", "X6", "X7"),
"BCG_late" = c("X13"),
"IgG_late" = c("X10", "X17"),
"Latex_late" = c("X8", "X9", "X11", "X12", "X14", "X15", "X16"),
"LPS_late" = c("X18", "X19"))
#define colours per category
meta.s$rescaleoffset <- meta.s$rescale + 100*(as.numeric(meta.s$Category)-1)
scalerange <- range(meta.s$rescale)
gradientends <- scalerange + rep(c(0,100,200,300,400,500), each = 2)
colorends <- c("white", "green", "white", "orange", "white", "red", "white", "green", "white", "orange", "white", "purple")
#reorder by category
meta.s$variable2 <- reorder(meta.s$variable, as.double(meta.s$Category))
#reverse y axis labels (were z-a, now a-z)
flevels <- levels(meta.s$Protein)
flevels <- rev(flevels)
#x axis annotation variables
text_early <- textGrob("Early", gp=gpar(fontsize = 5, fontface = "bold", col = "red"))
text_late <- textGrob("Late", gp=gpar(fontsize = 5, fontface = "bold", col = "red"))
#plot heatmap
p <- ggplot(meta.s, aes(variable2, Protein)) +
geom_tile(aes(fill = rescaleoffset, shape = substr(Category, 1, 3)), colour = "lightgrey", show.legend = TRUE) +
#add line to seperate early from late
geom_vline(xintercept = 7.5) +
scale_fill_gradientn(colours = colorends, values = rescale(gradientends), guide = FALSE) +
scale_x_discrete("", expand = c(0, 0), labels = c("2006 Burlak", "2007 Rogers", "2007 Stuart", "2010 Boulais", "2012 Campbell-Villois", "2012 Goyette", "2015 Dill", "2010 Lee", "2007 Rogers", "2012 Buschow", "2001 Garin", "2007 Jutras", "2008 Shui", "2010 Boulais", "2010 Lee", "2012 Campbell-Villois", "2012 Goyette", "2015 Aloatti", "2015 Dill")) +
scale_y_discrete("", limits = flevels, expand = c(0, 0)) +
theme_grey(base_size = 5) +
theme(legend.position = "top", legend.box = "horizontal",
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 270, hjust = 0, size = 5, vjust = 0, face = "bold"),
plot.margin = unit(c(1,1,2,1), "lines")) +
annotation_custom(text_early, xmin = 0, xmax = 8, ymin=168.5, ymax = 168.5) +
annotation_custom(text_late, xmin = 8, xmax = 19, ymin=168.5, ymax = 168.5) +
guides(shape = guide_legend("Category", override.aes = list(fill = c("red", "green", "orange", "purple"))))
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
#Read source data
meta <- read.csv("Dropbox/meta_censored.csv")
#import libraries
library("ggplot2")
library("plyr")
library("reshape2")
library("scales")
library("grid")
#transform and rescale data in prep for later steps
meta.m <- melt(meta)
meta.s <- ddply(meta.m, .(variable), transform,
rescale = scale(value))
#generate categories to sort conditions by colour
meta.s$Category <- meta.s$variable
levels(meta.s$Category) <-
list("1_early" = c("X1", "X2"),
"2_early" = c("X3", "X4", "X5", "X6", "X7"),
"1_late" = c("X10", "X17"),
"2_late" = c("X8", "X9", "X11", "X12", "X14", "X15", "X16"),
"3_late" = "X13",
"4_late" = c("X18", "X19"))
#define colours per category
meta.s$rescaleoffset <- meta.s$rescale + 100*(as.numeric(meta.s$Category)-1)
scalerange <- range(meta.s$rescale)
gradientends <- scalerange + rep(c(0,100,200,300,400,500), each = 2)
colorends <- c("white", "red", "white", "green", "white", "red", "white", "green", "white", "orange", "white", "purple")
#reorder by category
meta.s$variable2 <- reorder(meta.s$variable, as.numeric(meta.s$Category))
#reverse y axis labels (were z-a, now a-z)
flevels <- levels(meta.s$Param)
flevels <- rev(flevels)
#x axis annotation variables
text_early <- textGrob("Early", gp=gpar(fontsize = 5, fontface = "bold", col = "red"))
text_late <- textGrob("Late", gp=gpar(fontsize = 5, fontface = "bold", col = "red"))
#plot heatmap
p <- ggplot(meta.s, aes(variable2, Param)) +
geom_tile(aes(fill = rescaleoffset, shape = substr(Category, 1, 2)), colour = "lightgrey", show.legend = TRUE) +
#add line to seperate early from late
geom_vline(xintercept = 7.5) +
scale_fill_gradientn(colours = colorends, values = rescale(gradientends), guide = FALSE) +
scale_x_discrete("", expand = c(0, 0)) +
scale_y_discrete("", limits = flevels, expand = c(0, 0)) +
theme_grey(base_size = 5) +
theme(legend.position = "right",
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 270, hjust = 0, size = 5, vjust = 0, face = "bold"),
plot.margin = unit(c(1,1,2,1), "lines")) +
annotation_custom(text_early, xmin = 0, xmax = 8, ymin=168.5, ymax = 168.5) +
annotation_custom(text_late, xmin = 8, xmax = 19, ymin=168.5, ymax = 168.5) +
guides(shape = guide_legend("Stimulus", override.aes = list(fill = c("red", "green", "orange", "purple"))))
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
library(biocLite)
library("biocLite")
biocLite()
source("https://bioconductor.org/biocLite.R")
biocLite("COPDSexualDimorphism.data")
library(COPDSexualDimorphism.data)
data(lgrc.expr.meta)
View(expr.meta)
View(expr.meta)
length(which(expr.meta$GENDER == "2-Female"))
table(expr.meta$GENDER)
median(expr.meta$pkyrs)
summary(expr.meta$pkyrs)
hist(expr.meta$pkyrs)
qqnorm(expr.meta$pkyrs)
boxplot(pkyrs~gender, data=expr.meta)
?linreg
??linreg
??regression
?fit
?lm
fit <- lm(mtcars$mpg ~ mtcars$wt)
str(fit)
str(fit[["coefficients"]])
citation()
shiny::runApp('Downloads/shiny_test')
?shiny
??shiny
runExample()
runExample("09_upload")
runExample("09_upload")
runExample("10_download")
runExample("09_upload")
runApp('RColocalizer')
runExample("09_upload")
runApp('RColocalizer')
runExample("09_upload")
runApp('RColocalizer')
runApp('RColocalizer')
getwd()
?fileInput
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
?textOutput
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runExample(10_download)
runExample("10_download")
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
options(shiny.reactlog = TRUE)
sessionInfo()
shiny::runApp('RColocalizer')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('kjkjk')
runApp('kjkjk')
runApp('rcoloc')
read.zip
?read.zip
??zip
?render
??render
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
?fileInput
?input
?inFile
??inFile
??input
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
?basename
runApp('rcoloc')
class(inFile)
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
?actionButton
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
class(filename)
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('rcoloc')
runApp('RColocalizer')
runApp('RColocalizer')
rm(filename)
runApp('RColocalizer')
?unzip
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
?req
runApp('RColocalizer')
runApp('RColocalizer')
runApp('rcoloc')
runApp('rcoloc')
runApp('RColocalizer')
runApp('rcoloc')
runApp('rcoloc')
?assign
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('RColocalizer')
runApp('rcol')
runApp('rcol')
runApp('rcol')
shiny::runApp('rcol')
install.packages('rsconnect')
install.packages('rsconnect')
install.packages('rsconnect')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='plinders',
token='9B7BF687B50893889005FD97BB316022',
secret='mkg8d9ihPZeJsGbS3vwq6QrWiglwRkvaxkpU+6gF')
library(rsconnect)
rsconnect:deployApp('~/rcol/')
rsconnect::deployApp('~/rcol/')
